import { Box, Button, FormControl, Switch, TextField, Typography } from '@mui/material';
import { useTranslation } from 'react-i18next';
import { forwardRef, useImperativeHandle, useState } from 'react';
import { DialogProps } from '@mui/material/Dialog';
import { create{{ model_name }}, {{ model_name }}Request } from '@/api';
import CustomizedDialog from '@/components/CustomizedDialog';

interface FormValues {
  {% for column in columns_request_create -%}
  {{ column.column_name }}: {{ column.ts_type  }}; // {{ column.column_comment }}
  {% endfor -%}
}

interface FormErrors { {% for column in columns_request_create -%}{% if not column.nullable %}
  {{ column.column_name }}?: string; // {{ column.column_comment }}{% endif -%}
  {% endfor %}
}

interface {{ model_name }}AddProps {
  onSubmit: () => void;
}

const {{ model_name }}Add = forwardRef(({ onSubmit }: {{ model_name }}AddProps, ref) => {
  const { t } = useTranslation();

  const [open, setOpen] = useState(false);
  const [maxWidth] = useState<DialogProps['maxWidth']>('sm');
  const [formValues, setFormValues] = useState<FormValues>({
    {% for column in columns_request_create -%}
    {{ column.column_name }}: {% if column.ts_type == 'number' %}0{% else %}''{% endif %},
    {% endfor -%}
  });
  const [errors, setErrors] = useState<FormErrors>({});

  useImperativeHandle(ref, () => ({
    show() {
      setOpen(true);
    },
    hide() {
      setOpen(false);
    },
  }));

  const validateForm = (): boolean => {
    const newErrors: FormErrors = {};
    {% for column in columns_request_create %}{% if not column.nullable %}
    {% if column.ts_type == 'number' -%}
    if (!formValues.{{ column.column_name }} && formValues.{{ column.column_name }} != 0) {
      newErrors.{{ column.column_name }} = t('page.post.error.{{ column.column_name }}');
    }
    {% else -%}
    if (!formValues.{{ column.column_name }}.trim()) {
      newErrors.{{ column.column_name }} = t('page.post.error.{{ column.column_name }}');
    }
    {% endif -%}{% endif -%}{% endfor %}
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleCancel = () => {
    setOpen(false);
    reset();
  };

  const handleClose = () => {
    setOpen(false);
    reset();
  };

  const reset = () => {
    setFormValues({
      {% for column in columns_request_create -%}
      {{ column.column_name }}: {% if column.ts_type == 'number' %}0{% else %}''{% endif %},
      {% endfor -%}
    });
    setErrors({});
  }

  const handleSubmit = async () => {
    if (validateForm()) {
      await create{{ model_name }}(formValues as {{ model_name }}Request);
      handleClose();
      onSubmit();
    }
  };

  const handleSubmitAndContinue = async () => {
    if (validateForm()) {
      await create{{ model_name }}(formValues as {{ model_name }}Request);
      onSubmit();
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, type } = e.target;
    if (type == 'number') {
      const numberValue = Number(value);
      setFormValues(prev => ({
        ...prev,
        [name]: numberValue
      }));
    } else {
      setFormValues(prev => ({
        ...prev,
        [name]: value
      }));
    }

    if (errors[name as keyof FormErrors]) {
      setErrors(prev => ({
        ...prev,
        [name]: undefined
      }));
    }
  };

  const handleStatusChange = (e: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {
    const { name } = e.target;

    setFormValues(prev => ({
      ...prev,
      [name]: checked ? 0 : 1
    }));

    if (errors[name as keyof FormErrors]) {
      setErrors(prev => ({
        ...prev,
        [name]: undefined
      }));
    }
  };

  return (
    <CustomizedDialog
      open={open}
      onClose={handleClose}
      title={t('global.operate.add') + t('global.page.post')}
      maxWidth={maxWidth}
      actions={
        <>
          <Button onClick={handleSubmitAndContinue}>{t('global.operate.confirm.continue')}</Button>
          <Button onClick={handleSubmit}>{t('global.operate.confirm')}</Button>
          <Button onClick={handleCancel}>{t('global.operate.cancel')}</Button>
        </>
      }
    >
      <Box
        noValidate
        component="form"
        {% set box_sx = "{display: 'flex',
          flexDirection: 'column',
          m: 'auto',
          width: 'fit-content',}" -%}
        sx={ {{ box_sx | safe }} }
      >
        {% set box_sx = "{minWidth: 120, '& .MuiTextField-root': { mt: 2, width: '200px' }}" -%}
        <FormControl sx={ {{ box_sx | safe }} }>
          {% for column in columns_request_create -%}
          <TextField{% if not column.nullable and column.column_name != 'status' %}
            required{% endif %}
            size="small"{% if column.ts_type == 'number' %}
            type="number"{% endif %}
            label={t("page.post.title.{{ column.column_name }}")}
            name='{{ column.column_name }}'
            value={formValues.{{ column.column_name }}}
            onChange={handleInputChange}{% if not column.nullable %}
            error={!!errors.{{ column.column_name }}}
            helperText={errors.{{ column.column_name }}}{% endif %}
          />
          {% endfor -%}
        </FormControl>{% for column in columns_request_create -%}{% if column.column_name == 'status' %}
        {% set box_sx = "{mt: 2, display: 'flex', alignItems: 'center'}" -%}
        <Box sx={ {{ box_sx | safe }} }>
          {% set box_sx = "{mr: 4}" -%}
          <Typography sx={ {{ box_sx | safe }} }>{t("page.post.title.status")}</Typography>
          {% set box_sx = "{mr: 2}" -%}
          <Switch sx={ {{ box_sx | safe }} } name='status' checked={!formValues.status} onChange={handleStatusChange} />
          <Typography>{formValues.status == 0 ? t('page.post.switch.status.true') : t('page.post.switch.status.false')}</Typography>
        </Box>{% endif %}{% endfor %}
      </Box>
    </CustomizedDialog>
  )
});

export default {{ model_name }}Add;