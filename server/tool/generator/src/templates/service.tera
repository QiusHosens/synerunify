use sea_orm::{DatabaseConnection, EntityTrait, ColumnTrait, ActiveModelTrait, PaginatorTrait, QueryOrder, QueryFilter, Condition};
use crate::model::{{ table_name }}::{Model as {{ model_name }}Model, ActiveModel as {{ model_name }}ActiveModel, Entity as {{ model_name }}Entity, Column};
use system_model::request::{{ table_name }}::{Create{{ request_model_name }}, Update{{ request_model_name }}, PaginatedKeywordRequest};
use system_model::response::{{ table_name }}::{{ response_model_name }};
use crate::convert::{{ table_name }}::{create_request_to_model, update_request_to_model, model_to_response};
use anyhow::{Result, anyhow};
use sea_orm::ActiveValue::Set;
use common::base::page::PaginatedResponse;
use common::context::context::LoginUserContext;
use common::interceptor::orm::active_filter::ActiveFilterEntityTrait;

pub async fn create(db: &DatabaseConnection, login_user: LoginUserContext, request: Create{{ request_model_name }}) -> Result<i64> {
    let mut {{ table_name }} = create_request_to_model(&request);
    {{ table_name }}.creator = Set(Some(login_user.id));
    {{ table_name }}.updater = Set(Some(login_user.id));
    {% if has_tenant_field  %}{{ table_name }}.tenant_id = Set(login_user.tenant_id);{% endif %}
    let {{ table_name }} = {{ table_name }}.insert(db).await?;
    Ok({{ table_name }}.id)
}

pub async fn update(db: &DatabaseConnection, login_user: LoginUserContext, request: Update{{ request_model_name }}) -> Result<()> {
    let {{ table_name }} = {{ model_name }}Entity::find_by_id(request.id)
        .one(db)
        .await?
        .ok_or_else(|| anyhow!("记录未找到"))?;

    let mut {{ table_name }} = update_request_to_model(&request, {{ table_name }});
    {{ table_name }}.updater = Set(Some(login_user.id));
    {{ table_name }}.update(db).await?;
    Ok(())
}

pub async fn delete(db: &DatabaseConnection, login_user: LoginUserContext, id: i64) -> Result<()> {
    let {{ table_name }} = {{ model_name }}ActiveModel {
        id: Set(id),
        {% if has_tenant_field  %}tenant_id: Set(login_user.tenant_id),{% endif %}
        deleted: Set(true),
        ..Default::default()
    };
    {{ table_name }}.update(db).await?;
    Ok(())
}

pub async fn get_by_id(db: &DatabaseConnection, login_user: LoginUserContext, id: i64) -> Result<Option<{{ response_model_name }}>> {
    let condition = Condition::all()
            {% if has_tenant_field  %}.add(Column::Id.eq(id))
            .add(Column::TenantId.eq(login_user.tenant_id));
            {% else %}.add(Column::Id.eq(id));{% endif %}
    let {{ table_name }} = {{ model_name }}Entity::find_active_with_condition(condition)
        .one(db).await?;
    Ok({{ table_name }}.map(model_to_response))
}

pub async fn get_paginated(db: &DatabaseConnection, login_user: LoginUserContext, params: PaginatedKeywordRequest) -> Result<PaginatedResponse<{{ response_model_name }}>> {
    {% if has_tenant_field  %}let condition = Condition::all().add(Column::TenantId.eq(login_user.tenant_id));{% endif -%}
    let paginator = {{ model_name }}Entity::{% if has_tenant_field  %}find_active_with_condition(condition){% else %}find_active(){% endif %}
        .order_by_desc(Column::UpdateTime)
        .paginate(db, params.base.size);

    let total = paginator.num_items().await?;
    let total_pages = (total + params.base.size - 1) / params.base.size; // 向上取整
    let list = paginator
        .fetch_page(params.base.page - 1) // SeaORM 页码从 0 开始，所以减 1
        .await?
        .into_iter()
        .map(model_to_response)
        .collect();

    Ok(PaginatedResponse {
        list,
        total_pages,
        page: params.base.page,
        size: params.base.size,
        total,
    })
}

pub async fn list(db: &DatabaseConnection, login_user: LoginUserContext) -> Result<Vec<{{ response_model_name }}>> {
    {% if has_tenant_field  %}let condition = Condition::all().add(Column::TenantId.eq(login_user.tenant_id));{% endif -%}
    let list = {{ model_name }}Entity::{% if has_tenant_field  %}find_active_with_condition(condition){% else %}find_active(){% endif %}
        .all(db).await?;
    Ok(list.into_iter().map(model_to_response).collect())
}