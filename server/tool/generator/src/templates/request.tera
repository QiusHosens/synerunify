{% if request_has_time  %}use chrono::NaiveDateTime;{% endif %}
use serde::{Serialize, Deserialize};
use utoipa::ToSchema;
use common::base::page::PaginatedRequest;

#[derive(Serialize, Deserialize, Debug, ToSchema)]
pub struct Create{{ request_model_name }} {
    {% for column in columns_request_create %}
    pub {{ column.column_name }}: {% if column.nullable  %}Option<{{ column.rust_type  }}>{% else %}{{ column.rust_type  }}{% endif %}, // {{ column.column_comment  }}
    {% endfor %}
}

#[derive(Serialize, Deserialize, Debug, ToSchema)]
pub struct Update{{ request_model_name }} {
    {% for column in columns_request_update %}
    pub {{ column.column_name }}: {% if column.column_name != "id"  %}Option<{{ column.rust_type  }}>{% else %}{{ column.rust_type  }}{% endif %}, // {{ column.column_comment  }}
    {% endfor %}
}

#[derive(Serialize, Deserialize, Debug, ToSchema)]
pub struct PaginatedKeywordRequest {
    #[serde(flatten)]
    pub base: PaginatedRequest,
    pub keyword: Option<String>,
}